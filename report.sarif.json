{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"Polaris","organization":"Black Duck","rules":[{"id":"sigma.missing_tls:node_http_server|javascript","shortDescription":{"text":"Cleartext Transmission of Sensitive Information"},"fullDescription":{"text":"A web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>A web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>```81 }\n82 \n83 var token = 'SECRET_TOKEN_f8ed84e8f41e4146403dd4a6bbcea5e418d23a9';\n84 console.log('token: ' + token);\n86 https.createServer({ key: privateKey, cert: certificate }, app).listen(app.get('port'), function () {\n87   console.log('Express server listening on port ' + app.get('port'));\n88 });```</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DCleartext%20Transmission%20of%20Sensitive%20Information%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. Encrypt the data with a reliable encryption scheme before transmitting.\n  2. When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.\n  3. Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.\n  4. Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols., string=The web server uses insecure `HTTP`, risking data interception and modification by attackers. Address CWE-319 by securing data transmission with `HTTPS`., string=- **Purpose**: Sets up an Express server with a hardcoded token.\n- **Operational Flow**:\n  - Defines a token variable for potential authorization.\n  - Logs the token for debugging.\n  - Creates an HTTP server using Express, listening on a specified port.\n  - Logs server status once listening begins.\n- **Significance for Developers**:\n  - Demonstrates basic server setup with Express framework.\n  - Highlights token handling, albeit insecurely (hardcoded).\n- **Key Functionalities**:\n  - Server instantiation & port configuration.\n- **Actionable Insights**:\n  - Consider secure token management.\n  - Validate HTTP server setup.\n\n)","text":"A web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-319"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.missing_secure_attribute_session_cookie:express|javascript","shortDescription":{"text":"Secure Cookie Attribute Not Set"},"fullDescription":{"text":"The configuration of the `client-sessions`, `cookie-session` or `express-session` library does not set the `secure` attribute of the session cookie. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>The configuration of the `client-sessions`, `cookie-session` or `express-session` library does not set the `secure` attribute of the session cookie. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>```File: app.js\nCode:\n40 app.use(logger('dev'));\n41 app.use(methodOverride());\n42 app.use(session({\n43   secret: 'keyboard cat',\n44   name: 'connect.sid',\n45   cookie: { path: '/', secure: true }\n46 }))\n47 app.use(bodyParser.json());\n48 app.use(bodyParser.urlencoded({ extended: false }));\n49 app.use(fileUpload());```</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DSecure%20Cookie%20Attribute%20Not%20Set%26context%3AtoolType%3Dsast, string=, string=Set the 'Secure' attribute should on all cookies that contain sensitive data, especially those containing session IDs. The mitigation details depend on the application server, with some requiring programmatic configuration, where others can be configured through an administration interface. \n\nIf not already done, consider deploying HTTP Strict Transport Security (HSTS) headers to minimize the risk of plain-text HTTP requests to the application server., string=Missing `secure` attribute in session cookies allows exposure over HTTP, enabling attackers to intercept and impersonate users by stealing session cookies. (CWE-614), string=- Implements middleware for an Express application to handle logging, HTTP method override, and session management.\n- Uses `logger('dev')` for development-level logging.\n- Applies `methodOverride()` to simulate HTTP verb changes.\n- Configures session with 'keyboard cat' secret and custom cookie settings.\n- Utilizes `bodyParser.json()` and `bodyParser.urlencoded()` to parse request bodies.\n- Integrates `fileUpload()` to facilitate file uploads.\n- Essential for developers needing structured handling of client requests, session control, and file uploads.\n- Enhances application functionality through streamlined data processing and user session management.)","text":"The configuration of the `client-sessions`, `cookie-session` or `express-session` library does not set the `secure` attribute of the session cookie. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-614"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.file_upload_misconfiguration_of_temp_files:express|javascript","shortDescription":{"text":"Uncontrolled Resource Consumption"},"fullDescription":{"text":"Memory buffers are used for managing uploads in the `express-fileupload` module. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file fields in one request and exhaust the server memory."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>Memory buffers are used for managing uploads in the `express-fileupload` module. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file fields in one request and exhaust the server memory.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>```name: 'connect.sid',\n  cookie: { path: '/' }\n}))\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(fileUpload({\n  limits: { \n    fileSize: 1 * 1024 * 1024, // Limit file size to 1 MB\n    files: 5 // Limit number of files to 5\n  },\n  abortOnLimit: true // Abort the request if the limits are exceeded\n}));\n\n// Routes\napp.use(routes.current_user);\napp.get('/', routes.index);\napp.get('/login', routes.login);```</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUncontrolled%20Resource%20Consumption%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\n  2. Mitigation of resource exhaustion attacks requires that the target system either:\n\n    * recognizes the attack and denies that user further access for a given amount of time, or\n    * uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.\n\nThe first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.\n\nThe second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.\n\n  3. Ensure that protocols have specific limits of scale placed on them.\n  4. Ensure that all failures in resource allocation place the system into a safe posture., string=The `express-fileupload` module's memory buffers can be exploited for a denial-of-service attack by overwhelming server memory with numerous file uploads. This relates to CWE-400., string=- **Purpose**: Manages user sessions and handles HTTP requests in a Node.js application.\n- **Session Management**: Utilizes `connect.sid` cookie for session tracking.\n- **Request Parsing**: Implements `bodyParser` for JSON and URL-encoded payloads.\n- **File Handling**: Supports file uploads with `fileUpload`.\n- **Routing**: Defines routes for current user, home, and login pages.\n- **Developer Significance**: \n  - Facilitates RESTful interaction.\n  - Enhances session handling and file operations.\n  - Simplifies user authentication and navigation setup.\n- **Actionable Insight**: Integrate middleware systematically for optimal request handling.)","text":"Memory buffers are used for managing uploads in the `express-fileupload` module. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file fields in one request and exhaust the server memory."},"properties":{"security-severity":"8.9","tags":["security","static_analysis","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"sigma.hardcoded_secret:pattern_low|javascript","shortDescription":{"text":"Use of Hard-coded Credentials"},"fullDescription":{"text":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>``````</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks., string=, string=)","text":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-798"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.file_upload_misconfiguration_of_safe_file_names:express|javascript","shortDescription":{"text":"External Control of File Name or Path"},"fullDescription":{"text":"The dangerous characters from user-provided file names are not stripped in the `express-fileupload` module. Path manipulation is then possible since users can upload files with unsafe names."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>The dangerous characters from user-provided file names are not stripped in the `express-fileupload` module. Path manipulation is then possible since users can upload files with unsafe names.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>``````\n44   name: 'connect.sid',\n45   cookie: { path: '/' }\n46 }))\n47 app.use(bodyParser.json());\n48 app.use(bodyParser.urlencoded({ extended: false }));\n49 app.use(fileUpload({\n50   // Specify a safe file name function\n51   safeFileNames: true,\n52   // Specify allowable file extensions\n53   preserveExtension: true\n54 }));\n55 \n56 // Routes\n57 app.use(routes.current_user);\n58 app.get('/', routes.index);\n59 app.get('/login', routes.login);\n``````</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DExternal%20Control%20of%20File%20Name%20or%20Path%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap provide this capability.\n  2. Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory.\n\nExamples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n\n  3. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n  4. Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\n  5. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59).\n  6. Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.\n  7. If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.\n  8. Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\n  9. Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n  10. Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules., string=The `express-fileupload` module fails to strip dangerous characters from user-uploaded file names, allowing path manipulation vulnerabilities (CWE-73). This enables users to upload files with unsafe names., string=- Configures session management with a specific cookie name.\n- Parses JSON and URL-encoded data from incoming requests.\n- Enables file upload capability.\n- Defines and uses routes for user sessions, index, and login pages.\n- Serves as middleware setup for an Express.js application.\n- Enhances web app interactivity with user session tracking and handling form data.\n- Includes basic route management for efficient request handling.\n- Useful for developers to establish foundational backend features, simplifying session and data handling.)","text":"The dangerous characters from user-provided file names are not stripped in the `express-fileupload` module. Path manipulation is then possible since users can upload files with unsafe names."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-73"]},"defaultConfiguration":{"level":"note"}},{"id":"hardcoded_credentials|javascript","shortDescription":{"text":"Hard-coded Secrets in Server-side Code"},"fullDescription":{"text":"Credentials are stored directly in the source code"},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>Credentials are stored directly in the source code<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>``````</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DHard-coded%20Secrets%20in%20Server-side%20Code%26context%3AtoolType%3Dsast, string=## Local Effect\n\nUsers with access to this source code can use these credentials to access production services or data.  Changing these credentials requires changing the code and re-deploying the application.\n, string=Sensitive information such as access credentials, passwords, and cryptographic keys should not be stored in the source code. Always store secrets outside the source code. When possible, keep them in a strongly-protected, encrypted configuration file or database that is protected \nfrom access by all outsiders, including other local users on the same system.\n\nOne solution is to encrypt passwords within the properties file and store the key in a safe location. This is especially necessary if people other than the administrators have access to the properties file. Upon encryption, if different people need access to the properties file, access to the encryption key should be restricted. There are different options to implement such solutions depending on the deployment scenario. For example, on Windows you may consider using the Data Protection API (DPAPI or the newer DPAPI-NG)., string=, string=)","text":"Credentials are stored directly in the source code"},"properties":{"security-severity":"6.8","tags":["security","static_analysis","external/cwe/cwe-798"]},"defaultConfiguration":{"level":"warning"}},{"id":"sigma.hardcoded_secret:pattern_medium|text","shortDescription":{"text":"Use of Hard-coded Credentials"},"fullDescription":{"text":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>``````</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks., string=, string=)","text":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"properties":{"security-severity":"6.8","tags":["security","static_analysis","external/cwe/cwe-798"]},"defaultConfiguration":{"level":"warning"}},{"id":"sigma.unsafe_session_storage:express_session|javascript","shortDescription":{"text":"Insecure Storage of Sensitive Information"},"fullDescription":{"text":"The session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>The session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>``````javascript\n37 cons.dust.helpers = dustHelpers;\n38 app.set('views', path.join(__dirname, 'views'));\n39 app.set('view engine', 'ejs');\n40 app.use(logger('dev'));\n41 app.use(methodOverride());\n42 app.use(session({\n43   secret: 'keyboard cat',\n44   name: 'connect.sid',\n45   store: new (require('connect-mongo')(session))({\n46     url: 'mongodb://localhost/sessiondb'\n47   }),\n48   cookie: { path: '/' }\n49 }))\n50 app.use(bodyParser.json());\n``````</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DInsecure%20Storage%20of%20Sensitive%20Information%26context%3AtoolType%3Dsast, string=, string=Unspecified remediation., string=The `express-session` module's session storage leaks memory, potentially enabling attackers to create numerous sessions, leading to Denial-of-Service (CWE-922)., string=- **Views Configuration**: Sets up view templates using EJS, aiding dynamic HTML rendering.\n- **Logging**: Utilizes 'logger' for development-level request logging, crucial for monitoring.\n- **Method Override**: Supports custom HTTP methods, enhancing RESTful capabilities.\n- **Session Management**: Implements session handling with 'keyboard cat' secret, enabling user state tracking.\n- **Body Parsing**: Processes incoming JSON payloads, facilitating API handling.\n- **Cookie Configuration**: Configures cookie path, impacting session data security.\n- **Significance**: Forms fundamental middleware setup for Express.js applications, essential for efficient web service operation and development.)","text":"The session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation."},"properties":{"security-severity":"6.8","tags":["security","static_analysis","external/cwe/cwe-922"]},"defaultConfiguration":{"level":"warning"}},{"id":"sigma.container_filesystem_write:docker_compose|text","shortDescription":{"text":"Files or Directories Accessible to External Parties"},"fullDescription":{"text":"The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>```version: \"2\"\nservices:\n  goof:\n    build: .\n    container_name: goof\n    environment:\n      - DOCKER=1\n    ports:\n      - \"3001:3001\"\n    volumes:\n      - /data/readonly:/data:ro```</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DFiles%20or%20Directories%20Accessible%20to%20External%20Parties%26context%3AtoolType%3Dsast, string=, string=Unspecified remediation., string=Docker permits writing to the root filesystem, enabling risks like privilege escalation and denial-of-service attacks by tampering with container instances., string=- Defines a Docker Compose configuration using version \"2\" for simplicity.\n- Specifies a service named \"goof\" with a container build context set to the current directory.\n- Assigns a custom container name \"goof\" for easier identification.\n- Sets an environment variable \"DOCKER\" to 1 for runtime configuration.\n- Maps port 3001 on the host to port 3001 in the container for external access.\n- Enables quick deployment and consistent environment setup across development systems.\n- Suitable for developers needing a lightweight, efficient development setup with customizability.)","text":"The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-552"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.container_running_as_root:dockerfile|text","shortDescription":{"text":"Improper Privilege Management"},"fullDescription":{"text":"The Docker container is configured to run as the root user."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>The Docker container is configured to run as the root user.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>```FROM node:18.13.0\n\nRUN mkdir /usr/src/goof\nRUN mkdir /tmp/extracted_files\nCOPY . /usr/src/goof\nWORKDIR /usr/src/goof\n\n# Switch to a non-root user\nRUN adduser --disabled-password --gecos '' goofuser && chown -R goofuser:goofuser /usr/src/goof /tmp/extracted_files\nUSER goofuser```</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Follow the principle of least privilege when assigning access rights to entities in a software system.\n  3. Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource., string=Docker container runs as root user, posing a security risk linked to CWE-269 privilege escalation vulnerability., string=- **Purpose**: Builds a Docker image for a Node.js application.\n- **Base Image**: Uses Node.js 18.13.0 instead of the outdated Node.js 6-stretch.\n- **Directory Creation**: Establishes `/usr/src/goof` for application setup and `/tmp/extracted_files` potentially for temporary storage or processing.\n- **File Copying**: Transfers all project files into the `/usr/src/goof` directory.\n- **Working Directory**: Sets `/usr/src/goof` as the current working directory for running commands inside the container.\n- **Significance**: Ensures an updated, isolated environment for consistent application deployment, enhancing compatibility and security.\n- **Actionable Insight**: Update Node.js version for improved performance and security.)","text":"The Docker container is configured to run as the root user."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-269"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.container_requesting_net_raw:docker_compose|text","shortDescription":{"text":"Improper Privilege Management"},"fullDescription":{"text":"The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>```version: \"2\"\nservices:\n  goof:\n    build: .\n    container_name: goof\n    environment:\n      - DOCKER=1\n    ports:\n      - \"3001:3001\"\n    cap_drop:\n      - NET_RAW```</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Follow the principle of least privilege when assigning access rights to entities in a software system.\n  3. Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource., string=Docker containers with `NET_RAW` capability can access host network interfaces, posing a security risk related to CWE-269 privilege management., string=- **Docker Compose Version**: Utilizes version 2.\n- **Service Definition**: Specifies a single service named \"goof.\"\n- **Build Configuration**: Builds from the current directory (`.`).\n- **Container Identification**: Names the container \"goof.\"\n- **Environment Variable**: Sets `DOCKER=1` indicating the docker environment.\n- **Port Mapping**: Exposes port 3001 on the container to port 3001 on the host.\n- **Purpose**: Simplifies container deployment for developers.\n- **Significance**: Enhances app management, scalability, and environment configuration, facilitating seamless development and operational workflows.)","text":"The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."},"properties":{"security-severity":"8.9","tags":["security","static_analysis","external/cwe/cwe-269"]},"defaultConfiguration":{"level":"error"}},{"id":"sigma.verbose_server_banner:express|javascript","shortDescription":{"text":"Insertion of Sensitive Information Into Sent Data"},"fullDescription":{"text":"HTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>HTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>``````\nFile: app.js\nCode:\n23 var dust = require('dustjs-linkedin');\n24 var dustHelpers = require('dustjs-helpers');\n25 var cons = require('consolidate');\n26 const hbs = require('hbs')\n28 var app = express();\n29 var routes = require('./routes');\n30 var routesUsers = require('./routes/users.js')\n31 \n32 // all environments\n33 app.set('port', process.env.PORT || 3001);\n34 app.disable('x-powered-by');\n``````</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DInsertion%20of%20Sensitive%20Information%20Into%20Sent%20Data%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.\n  2. Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\n  3. Setup default error messages so that unexpected errors do not disclose sensitive information.\n  4. Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges., string=HTTP responses expose server info via `X-Powered-By` header, aiding attackers in exploiting vulnerabilities. This issue falls under CWE-201., string=- **Dependencies**: Utilizes Dust.js for templating, Dust.js-helpers for additional functionalities, Consolidate for template engine support, and HBS for Handlebars view engine integration.\n- **Server Setup**: The Express application is initialized on line 28.\n- **Routing**: Routes are sourced from two separate files, enhancing modular code structure.\n- **Environments Config**: Sets up the server to run on port 3001 or one specified in the environment variables, supporting flexible deployment.\n- **Significance**: Provides a robust structure for handling templates and routes before crafting a full Express.js application, supporting scalable and maintainable web development practices.)","text":"HTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-201"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.hardcoded_secret:pattern_low|text","shortDescription":{"text":"Use of Hard-coded Credentials"},"fullDescription":{"text":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>``````</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks., string=, string=)","text":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-798"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.container_privilege_escalation_allowed:docker_compose|text","shortDescription":{"text":"Improper Privilege Management"},"fullDescription":{"text":"The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>```version: \"2\"\nservices:\n  goof:\n    build: .\n    container_name: goof\n    environment:\n      - DOCKER=1\n    ports:\n      - \"3001:3001\"\n    security_opt:\n      - \"no-new-privileges:true\"```</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Follow the principle of least privilege when assigning access rights to entities in a software system.\n  3. Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource., string=Docker Compose file allows privilege escalation by not setting `no-new-privileges` to `true`, risking root-level operations via SUID/SGID bits., string=- **Purpose**: Define and run a Docker container named \"goof\" using Docker Compose.\n- **Operational Flow**:\n  - **Version**: Uses Docker Compose format version \"2\".\n  - **Build**: Builds an image from the current directory (`.`).\n  - **Environment**: Sets environment variable `DOCKER=1`.\n  - **Ports**: Maps container port `3001` to host port `3001`.\n- **Significance**: Simplifies launching and managing containerized applications.\n- **Key Features**:\n  - Port mapping facilitates accessible web interfaces.\n  - Environment configuration enables variable management.\n- **Actionable Insights**: Quickly prototype and test applications by redefining build processes and dependencies within the `docker-compose.yml`.)","text":"The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-269"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.least_privilege_violation:docker_compose|text","shortDescription":{"text":"Improper Access Control"},"fullDescription":{"text":"The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>```File: docker-compose.yml\nCode:\n16     container_name: goof-mongo\n17     image: mongo:3\n18     ports:\n19       - \"27017:27017\"\n20     cap_drop:\n21       - ALL\n22     cap_add:\n23       - SYS_ADMIN\n24   good-mysql:\n25     container_name: goof-mysql\n26     image: mysql:5\n27     environment:\n28       MYSQL_ROOT_PASSWORD: root\n29       MYSQL_DATABASE: acme\n30     ports:\n31     cap_drop:\n32       - ALL\n33     cap_add:\n34       - SYS_ADMIN```</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Access%20Control%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges., string=Docker container grants excessive privileges by not selectively including capabilities, violating CWE-284's least privilege principle., string=- **Purpose**: Sets up MongoDB and MySQL databases using Docker Compose.\n- **Key Functionalities**:\n  - Defines containers for MongoDB (`goof-mongo`) and MySQL (`goof-mysql`) with specified versions.\n  - Exposes MongoDB port 27017 for external access.\n  - Configures MySQL with root password and initializes database `acme`.\n- **Operational Flow**:\n  - Pulls specified database images and creates containers.\n  - Connects applications to persistent databases via exposed ports.\n- **Significance**:\n  - Facilitates quick environment setup for testing and development.\n  - Enhances reproducibility across various development stages.\n- **Actionable Insights**:\n  - Customize environment settings to suit specific project requirements.)","text":"The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-284"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.file_upload_misconfiguration_of_fields:express|javascript","shortDescription":{"text":"Uncontrolled Resource Consumption"},"fullDescription":{"text":"The `express-fileupload` module does not restrict the number of file/non-file fields in a single request. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file/non-file fields in one request."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>The `express-fileupload` module does not restrict the number of file/non-file fields in a single request. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file/non-file fields in one request.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>```44   name: 'connect.sid',\n45   cookie: { path: '/' }\n46 }))\n47 app.use(bodyParser.json());\n48 app.use(bodyParser.urlencoded({ extended: false }));\n49 app.use(fileUpload({\n50   limitHandler: function(req, res, next) {\n51     if (Object.keys(req.files).length > 10 || Object.keys(req.body).length > 20) {\n52       return res.status(429).send(\"Too many files or fields.\");\n53     }\n54     next();\n55   }\n56 }));\n57 \n58 // Routes\n59 app.use(routes.current_user);\n60 app.get('/', routes.index);\n61 app.get('/login', routes.login);```</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUncontrolled%20Resource%20Consumption%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\n  2. Mitigation of resource exhaustion attacks requires that the target system either:\n\n    * recognizes the attack and denies that user further access for a given amount of time, or\n    * uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.\n\nThe first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.\n\nThe second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.\n\n  3. Ensure that protocols have specific limits of scale placed on them.\n  4. Ensure that all failures in resource allocation place the system into a safe posture., string=The `express-fileupload` module vulnerability allows denial-of-service attacks by accepting excessive file/non-file fields in one request, identified as CWE-400., string=- **Purpose:** Set up middleware for a Node.js app using Express.\n- **Operational Flow:** Configure session, parse JSON and URL-encoded data, handle file uploads.\n- **Significance:** Streamlines common server-side tasks, aiding efficient API development.\n- **Key Functionalities:** \n  - Session management (`connect.sid` with cookie settings).\n  - Body parsing with `bodyParser.json()` and `bodyParser.urlencoded()`.\n  - File handling via `fileUpload()`.\n  - Defines routes for user management and authentication.\n- **Exceptional Features:** Modular route handling improves code organization.\n- **Actionable Insights:** Simplifies handling HTTP requests, session, and file uploads for developers.)","text":"The `express-fileupload` module does not restrict the number of file/non-file fields in a single request. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file/non-file fields in one request."},"properties":{"security-severity":"8.9","tags":["security","static_analysis","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"sigma.file_upload_misconfiguration_of_filesize:express|javascript","shortDescription":{"text":"Uncontrolled Resource Consumption"},"fullDescription":{"text":"The `express-fileupload` module does not restrict the size of the uploaded file. Thus, a denial-of-service attack is possible, because an attacker may submit a series of requests with very large files and use up all the space on the server."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>The `express-fileupload` module does not restrict the size of the uploaded file. Thus, a denial-of-service attack is possible, because an attacker may submit a series of requests with very large files and use up all the space on the server.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>```44   name: 'connect.sid',\n45   cookie: { path: '/' }\n46 }))\n47 app.use(bodyParser.json());\n48 app.use(bodyParser.urlencoded({ extended: false }));\n49 app.use(fileUpload({\n50   limits: { fileSize: 5 * 1024 * 1024 } // Limit file size to 5MB\n51 }));\n52 \n53 // Routes\n54 app.use(routes.current_user);\n55 app.get('/', routes.index);\n56 app.get('/login', routes.login);```</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUncontrolled%20Resource%20Consumption%26context%3AtoolType%3Dsast, string=, string=Potential mitigations include the following:\n  1. Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\n  2. Mitigation of resource exhaustion attacks requires that the target system either:\n\n    * recognizes the attack and denies that user further access for a given amount of time, or\n    * uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.\n\nThe first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.\n\nThe second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.\n\n  3. Ensure that protocols have specific limits of scale placed on them.\n  4. Ensure that all failures in resource allocation place the system into a safe posture., string=The `express-fileupload` module lacks file size restriction, enabling denial-of-service attacks by uploading large files, violating CWE-400 standards., string=- **Purpose**: Middleware setup and routing for a web application.\n- **Key Functionalities**:\n  - Session management (`connect.sid`).\n  - JSON and URL-encoded data parsing with `bodyParser`.\n  - File upload handling via `fileUpload`.\n- **Operational Flow**:\n  - Middleware configures the application for session handling and data parsing.\n  - Routes define HTTP endpoints for interacting with the application (`/`, `/login`, etc.).\n- **Significance**:\n  - Enhances application functionality by supporting sessions, data exchange, and file uploads.\n  - Essential for crafting efficient, modern web apps.\n)","text":"The `express-fileupload` module does not restrict the size of the uploaded file. Thus, a denial-of-service attack is possible, because an attacker may submit a series of requests with very large files and use up all the space on the server."},"properties":{"security-severity":"8.9","tags":["security","static_analysis","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"sigma.root_path_attribute_cookie:express|javascript","shortDescription":{"text":"Exposure of Resource to Wrong Sphere"},"fullDescription":{"text":"The `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>The `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>```File: app.js\nCode:\n40 app.use(logger('dev'));\n41 app.use(methodOverride());\n42 app.use(session({\n43   secret: 'keyboard cat',\n44   name: 'connect.sid',\n45   cookie: { path: '/your-subdirectory' }\n46 }))\n47 app.use(bodyParser.json());\n48 app.use(bodyParser.urlencoded({ extended: false }));\n49 app.use(fileUpload());```</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DExposure%20of%20Resource%20to%20Wrong%20Sphere%26context%3AtoolType%3Dsast, string=, string=Unspecified remediation., string=Session libraries can expose cookies to applications in other subdirectories if hosted under a subdirectory due to the default or root path setting, risking cookie theft if an application is compromised., string=- **Purpose**: Middleware setup for an Express.js application.\n- **Key Middleware**:\n  - **Logger**: `logger('dev')` for HTTP request logging.\n  - **Method Override**: Allows method alteration via a query string or headers.\n  - **Session Handling**: Manages sessions with `secret` for signing, `name` for session ID, and `cookie` configuration.\n  - **Body Parsing**: Parses JSON and URL-encoded request bodies.\n  - **File Upload**: Enables handling of file uploads.\n- **Operational Flow**:\n  - Sequential middleware setup for processing HTTP requests.\n- **Significance**:\n  - Enhances debugging, method flexibility, session management, and data handling.\n)","text":"The `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-668"]},"defaultConfiguration":{"level":"note"}},{"id":"xss|javascript","shortDescription":{"text":"Cross-site Scripting"},"fullDescription":{"text":"Untrusted user-supplied data is inserted into a context that can execute JavaScript without adequate validation, escaping, or filtering."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>Untrusted user-supplied data is inserted into a context that can execute JavaScript without adequate validation, escaping, or filtering.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>``````javascript\nFile: routes/index.js\nCode:\n327 }\n328 ///////////////////////////////////////////////////////////////////////////////\n329 \n330 const { escape } = require('lodash');\n331 \n332 exports.chat = {\n333   get(req, res) {\n334     const safeMessages = messages.map(message => ({\n335       ...message,\n336       username: escape(message.username),\n337       text: escape(message.text)\n338     }));\n339     res.send(safeMessages);\n340   },\n341   add(req, res) {\n342     const user = findUser(req.body.auth || {});\n343 \n344     if (!user) {\n347     const safeMessage = escape(req.body.message);\n348     _.merge(message, safeMessage, {\n353     messages.push(message);\n``````</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DCross-site%20Scripting%26context%3AtoolType%3Dsast, string=## Local Effect\n\nA user can execute arbitrary JavaScript on a web page viewed or accessed by another user, potentially allowing session hijacking, disclosing sensitive data in the DOM, or viewing of keyboard and mouse events.\n, string=Potential mitigations include the following:\n  1. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n\n  2. Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\n\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\n\nParts of the same output document may require different encodings, which will vary depending on whether the output is in the:\n\n    * HTML body\n    * Element attributes (such as src=\"XYZ\")\n    * URIs\n    * JavaScript sections\n    * Cascading Style Sheets and style property\n\netc. Note that HTML Entity Encoding is only appropriate for the HTML body.\n\nConsult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.\n\n  3. Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\n  4. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n  5. If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n  6. Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\n\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\n\n  7. With Struts, write all data from form beans with the bean's filter attribute set to true.\n  8. To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n  9. Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.\n\nEven if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n\n  10. When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n  11. Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\n  12. When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues., string=Unvalidated user data leads to potential JavaScript execution vulnerabilities in web contexts, related to CWE-79. Implement proper data validation, escaping, and filtering to mitigate risks., string=- **Purpose**: Manages chat functionalities within the application.\n- **Operations**:\n  - `get(req, res)`: Sends stored chat messages.\n  - `add(req, res)`: Adds new messages to the chat.\n- **Key Functionalities**:\n  - Retrieves messages for users.\n  - Integrates user authentication to ensure messages are added securely.\n- **Significance**:\n  - Essential for real-time communication features in applications.\n- **Developer Insights**:\n  - Ensure message objects and user authentication are correctly handled.\n  - Use lodash's `_.merge` for message object manipulation.\n- **Capability**:\n  - Efficient message management and user authentication.\n)","text":"Untrusted user-supplied data is inserted into a context that can execute JavaScript without adequate validation, escaping, or filtering."},"properties":{"security-severity":"8.9","tags":["security","static_analysis","external/cwe/cwe-79"]},"defaultConfiguration":{"level":"error"}},{"id":"sigma.missing_samesite_attribute_session_cookie:express|javascript","shortDescription":{"text":"Sensitive Cookie with Improper SameSite Attribute"},"fullDescription":{"text":"The `cookie.sameSite` option is either undefined or set to the insecure value `none` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks."},"help":{"markdown":"<details><summary><b>AI Insights</b></summary><h3>Issue Summary</h3>The `cookie.sameSite` option is either undefined or set to the insecure value `none` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks.<h3>Code Analysis</h3>Polaris<h3>Suggested Fix</h3>``````\n40 app.use(logger('dev'));\n41 app.use(methodOverride());\n42 app.use(session({\n43   secret: 'keyboard cat',\n44   name: 'connect.sid',\n45   cookie: { path: '/', sameSite: 'Strict' }\n46 }))\n47 app.use(bodyParser.json());\n48 app.use(bodyParser.urlencoded({ extended: false }));\n49 app.use(fileUpload());\n``````</details>%!(EXTRA string=https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DSensitive%20Cookie%20with%20Improper%20SameSite%20Attribute%26context%3AtoolType%3Dsast, string=, string=The server should explicitly set the SameSite attribute for all cookies containing sensitive data, such as session tokens. This can be accomplished either programmatically when setting Set-Cookie headers in responses or via deployment descriptors provided by various frameworks.\n\nThe setting \"SameSite=Strict\" provides the strongest protection against CSRF but the user experience works best when an application uses two different cookies, one for write-access that is locked down with \"SameSite=Strict\" and another for read-access that can have a more permissive setting, e.g., \"SameSite=Lax\". If the application only relies on one cookie for both read & write access, then the setting \"SameSite=Lax\" provides some protection against CSRF without too much negative impact on user experience. \n\nIt's worth noting that the definition of same-site is less restrictive than the definition of cross-origin, e.g., requests from other sub-domains are considered same-site although they are from a different origin. This means that even in browsers that fully support the \"SameSite\" cookie attribute, an attacker may still circumvent this protection if they can take over a subdomain or inject HTML or JavaScript into any subdomain of the same site. Therefore, relying on the \"SameSite\" attribute is not recommended as the sole defense against cross-site request forgery, it should instead be seen as a defense in depth mechanism that reduces the likelihood of CSRF., string=The `cookie.sameSite` option is undefined or set to `none`/`false`, disabling protections and enabling CSRF attacks by allowing cross-site cookie requests. CWE-1275 addresses this vulnerability., string=- **Logger**: Monitors HTTP requests for development purposes.\n- **Method Override**: Facilitates PUT/DELETE requests via POST.\n- **Session**: Manages user sessions with secret key security.\n- **Body Parser**: Parses JSON and URL-encoded data seamlessly.\n- **File Upload**: Supports management of file uploads.\n- **Flow**: Middleware sequence enhances request handling.\n- **Significance**: Offers robust session, data manipulation, and file operation capabilities.\n- **Actionable Insights**: Optimize session handling, secure endpoints, and streamline data transactions.)","text":"The `cookie.sameSite` option is either undefined or set to the insecure value `none` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-1275"]},"defaultConfiguration":{"level":"note"}}]}},"results":[{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/2F32240530D16D517B3293232E607EDD?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DCleartext%20Transmission%20of%20Sensitive%20Information%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp.js)\n\nA web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":86}}}],"ruleId":"sigma.missing_tls:node_http_server|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"9fccd21b9e05c5fc76b6e2d92a78cb6defe2d106354fa6a20127ed6937d2b575"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":86}},"message":{"text":"A web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":86}},"message":{"text":"Use the `https` library instead of the `http` library, or use the `createServer` method of the `http-server` library with the `https` option set to `true` to avoid sending data over the network in cleartext."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/DED711B9A8F90394E35393E9F225C312?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DSecure%20Cookie%20Attribute%20Not%20Set%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp.js)\n\nThe configuration of the `client-sessions`, `cookie-session` or `express-session` library does not set the `secure` attribute of the session cookie. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":45}}}],"ruleId":"sigma.missing_secure_attribute_session_cookie:express|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"9fcff5ecb875b7ccca75a8f66ca7e77a6de6718c882ff19f391582063aece106"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":45}},"message":{"text":"The configuration of the `client-sessions`, `cookie-session` or `express-session` library does not set the `secure` attribute of the session cookie. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":45}},"message":{"text":"Set the `secure` property to `true` explicitly to prevent the cookies from being sent over an insecure channel."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/9DD12E9FC52E8413FCA349E5B205E1B5?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUncontrolled%20Resource%20Consumption%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp.js)\n\nMemory buffers are used for managing uploads in the `express-fileupload` module. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file fields in one request and exhaust the server memory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":49}}}],"ruleId":"sigma.file_upload_misconfiguration_of_temp_files:express|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"da5ce77b55acee03be479d9228f88da6158e156939967affa6367f6263f4cdd5"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":49}},"message":{"text":"Memory buffers are used for managing uploads in the `express-fileupload` module. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file fields in one request and exhaust the server memory."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":49}},"message":{"text":"Use the temporary files instead of the memory buffer and specify a temporary files directory by setting the `useTempFile` property in the option."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/0A069418718964AED55780328DA61E5E?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dmongoose-db.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"mongoose-db.js"},"region":{"startLine":52}}}],"ruleId":"sigma.hardcoded_secret:pattern_low|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"2b10969c5adf5a73a024c0deea107d318e1a870fb3013541f02c09d31db48b0b"}},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/603C92FC43C0C7E3E273F1D5FA0B30B1?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DExternal%20Control%20of%20File%20Name%20or%20Path%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp.js)\n\nThe dangerous characters from user-provided file names are not stripped in the `express-fileupload` module. Path manipulation is then possible since users can upload files with unsafe names."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":49}}}],"ruleId":"sigma.file_upload_misconfiguration_of_safe_file_names:express|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"c904274400a5852c0594585ebed1af5fd261dad6248651de3d0c27e2622bc15f"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":49}},"message":{"text":"The dangerous characters from user-provided file names are not stripped in the `express-fileupload` module. Path manipulation is then possible since users can upload files with unsafe names."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":49}},"message":{"text":"Set the `safeFileNames` to `true` to strip out the dangerous characters from the upload's file name."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/C8E178FE23AB2796438FBEDFF5E98AAC?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dtypeorm-db.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"typeorm-db.js"},"region":{"startLine":12}}}],"ruleId":"sigma.hardcoded_secret:pattern_low|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"f7cfa131b1fa587e0f2a9d5032e612eaba9ff1b516666c10ff6303edd2ebf2ff"}},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/ACE8B6089A4FCB908A5FDC950778C566?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DHard-coded%20Secrets%20in%20Server-side%20Code%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp.js)\n\nCredentials are stored directly in the source code"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":42}}}],"ruleId":"hardcoded_credentials|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"283ee9ae381e894fbf97190b785f544367570cb166586e1a5a8ee91c7e0c709c"}},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/6EE2409A97A0702D07844537BB722494?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dsarif.json)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"sarif.json"},"region":{"startLine":1345}}}],"ruleId":"sigma.hardcoded_secret:pattern_medium|text","partialFingerprints":{"ruleIdLocationHash/v1":"eb1c257751fb13f91f6f583e3251c953ec88a896726c8493cbad0818e9769731"}},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/67771C81A655F62EEB3C11C166A9CF42?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DInsecure%20Storage%20of%20Sensitive%20Information%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp.js)\n\nThe session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":42}}}],"ruleId":"sigma.unsafe_session_storage:express_session|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"36eee3bbd76e62632c08ba312f3364052a2c1a4cf3d1379b271ef83c2b61b132"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":42}},"message":{"text":"The session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":42}},"message":{"text":"Set the `store` property to a third-party secure storage, such as MongoDB or Redis for a production environment. Use `connect-mongo` or `connect-redis` libraries accordingly to configure the session storage."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/60316138AAEDDE13ED7B6C45D7B2F777?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":43}}}],"ruleId":"sigma.hardcoded_secret:pattern_low|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"095b8b1901d1004f38d3fe1874fecc6612b61520297187a3583a1ba839f37a5d"}},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/5F5ED4AE5A485398E7AAA8BD41022EB4?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DFiles%20or%20Directories%20Accessible%20to%20External%20Parties%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":4}}}],"ruleId":"sigma.container_filesystem_write:docker_compose|text","partialFingerprints":{"ruleIdLocationHash/v1":"d2beb6d77471aadf1d234fa107a10925aab898421678f8b1fdf9e61a6f4dfc01"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":4}},"message":{"text":"The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":4}},"message":{"text":"Explicitly set the `read-only` attribute of the service to `true` to create a service container with a read-only filesystem."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/2F522EF2B16B9ED036B6BE290CD46F5E?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3DDockerfile)\n\nThe Docker container is configured to run as the root user."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Dockerfile"},"region":{"startLine":2}}}],"ruleId":"sigma.container_running_as_root:dockerfile|text","partialFingerprints":{"ruleIdLocationHash/v1":"d7ba8fabfaa1149b2201066bb8d104f6390200f6389ea00beb66ae1d7bc210ea"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Dockerfile"},"region":{"startLine":2}},"message":{"text":"The Docker container is configured to run as the root user."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Dockerfile"},"region":{"startLine":2}},"message":{"text":"Explicitly set the last `USER` value to a non-root user to prevent the container from running in a privileged context."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/8F745A39A9DC9916C6B7E3E51E187540?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":4}}}],"ruleId":"sigma.container_requesting_net_raw:docker_compose|text","partialFingerprints":{"ruleIdLocationHash/v1":"14ddfa78e80200c7baa2fcb1837673c91fa88641f60535939d55a79ad193b45a"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":4}},"message":{"text":"The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":4}},"message":{"text":"Explicitly remove the `NET_RAW` capability by adding either `NET_RAW` or `ALL` to the `cap_drop` list and avoiding the `NET_RAW` capability in the `cap_add` list."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/FDFB8F90CC69EDD9E9D75C1BE7E9B2EA?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Droutes%2Findex.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"routes/index.js"},"region":{"startLine":315}}}],"ruleId":"sigma.hardcoded_secret:pattern_low|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"7b2ebeadb9ad5cfe941417f0c718d12ee2e740b4f60b34e16d0abc7a9191d3f5"}},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/29ABECD598ED611E20A3AAF6F3DE4E20?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DFiles%20or%20Directories%20Accessible%20to%20External%20Parties%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":21}}}],"ruleId":"sigma.container_filesystem_write:docker_compose|text","partialFingerprints":{"ruleIdLocationHash/v1":"63122f80d78e08efc705c526f998ceb49b955a5678e18bdf02fd80447dc558bf"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":21}},"message":{"text":"The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":21}},"message":{"text":"Explicitly set the `read-only` attribute of the service to `true` to create a service container with a read-only filesystem."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/710AD2E9FD6DE7C77E84331DE8DA5B7F?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dtests%2Fauthentication.component.spec.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"tests/authentication.component.spec.js"},"region":{"startLine":35}}}],"ruleId":"sigma.hardcoded_secret:pattern_low|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"5e862700acc4bb21d46c57dc324c31eea35d8ad6c252c142078b6ffb134e3b95"}},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/99B8898F3CA3D6BF6DBFC14A3123480D?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":16}}}],"ruleId":"sigma.container_requesting_net_raw:docker_compose|text","partialFingerprints":{"ruleIdLocationHash/v1":"c03cefd8d85249f92d21ae491f9531633911c8b326d01236c63054fb7625ce69"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":16}},"message":{"text":"The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":16}},"message":{"text":"Explicitly remove the `NET_RAW` capability by adding either `NET_RAW` or `ALL` to the `cap_drop` list and avoiding the `NET_RAW` capability in the `cap_add` list."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/9FB90B93A924616FA637E4C307B4CB04?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DInsertion%20of%20Sensitive%20Information%20Into%20Sent%20Data%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp.js)\n\nHTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":28}}}],"ruleId":"sigma.verbose_server_banner:express|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"d247e804a460a333ba686ae782dc6afc65739504ed88fa6083de001cd9f15daa"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":28}},"message":{"text":"HTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":28}},"message":{"text":"Use `app.disable('x-powered-by')` to disable the `X-Powered-By` header. If you're using an older version of Express that does not support this setting and you can't upgrade, create a middleware to call `res.removeHeader(\"x-powered-by\")` where `res` is the response object."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/F03C0F09656953D57B2B4DE18E5C47C4?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":24}}}],"ruleId":"sigma.hardcoded_secret:pattern_low|text","partialFingerprints":{"ruleIdLocationHash/v1":"b9a17844c41b19f7ed47dd1b36a0b7c75023389595a8bd2350cd98f46e7b0a0d"}},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/897CB31CECBF1BC803D890423FAC4FF7?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dsast.json)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"sast.json"},"region":{"startLine":2352}}}],"ruleId":"sigma.hardcoded_secret:pattern_medium|text","partialFingerprints":{"ruleIdLocationHash/v1":"5a546b7c09c6d30a589988754b85afa8c1af29a095033d2fbf68cc4a67fb1d72"}},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/1EF0F18783E93CE4DBDBF9BE26BD7A02?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DFiles%20or%20Directories%20Accessible%20to%20External%20Parties%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":16}}}],"ruleId":"sigma.container_filesystem_write:docker_compose|text","partialFingerprints":{"ruleIdLocationHash/v1":"5e9a64ee32a32a2c87f8774c3752183bfe4fa9bfe8f821cc5e7344c4e9edd48d"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":16}},"message":{"text":"The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":16}},"message":{"text":"Explicitly set the `read-only` attribute of the service to `true` to create a service container with a read-only filesystem."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/394DD50CB65762A96FC85C7F39B44B11?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":4}}}],"ruleId":"sigma.container_privilege_escalation_allowed:docker_compose|text","partialFingerprints":{"ruleIdLocationHash/v1":"8eefaf5b9929a42896272541f75aab1ecd30c7f397cba168c7bffb6d01bc5e76"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":4}},"message":{"text":"The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":4}},"message":{"text":"Disable container privilege escalation by explicitly setting `no-new-privileges` to `true`."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/51E27AE682845839C43D4B3C4D82F9E3?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":21}}}],"ruleId":"sigma.container_requesting_net_raw:docker_compose|text","partialFingerprints":{"ruleIdLocationHash/v1":"1603b2f4fa600150745b551bc6cf2137a48524f68b4c603beb1c11a5698df6e0"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":21}},"message":{"text":"The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":21}},"message":{"text":"Explicitly remove the `NET_RAW` capability by adding either `NET_RAW` or `ALL` to the `cap_drop` list and avoiding the `NET_RAW` capability in the `cap_add` list."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/E15A4FCB1AB2C255D12B97F69A94C227?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Access%20Control%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":21}}}],"ruleId":"sigma.least_privilege_violation:docker_compose|text","partialFingerprints":{"ruleIdLocationHash/v1":"47309bddff6965ec64e2ec73379ddd29435581ae68d2ab2a7aeb9f76fc59ea36"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":21}},"message":{"text":"The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":21}},"message":{"text":"Remove all the default capabilities from the list of capabilities by setting the `cap_drop` value to `ALL` and then add only specific capabilities needed by a container."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/82D2CBF8A563CDC2B6F93E6F9D1F0F10?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUncontrolled%20Resource%20Consumption%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp.js)\n\nThe `express-fileupload` module does not restrict the number of file/non-file fields in a single request. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file/non-file fields in one request."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":49}}}],"ruleId":"sigma.file_upload_misconfiguration_of_fields:express|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"ff7a1b2c0f6dbb2f59c38947e79f82dc0fce370dc38f53b858a04740cd7892b5"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":49}},"message":{"text":"The `express-fileupload` module does not restrict the number of file/non-file fields in a single request. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file/non-file fields in one request."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":49}},"message":{"text":"Limit the number of file fields in a request by setting the `files` property and the number of non-file fields by setting the `fields` property in the `limits` object of the options."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/E8E3A26CD73260C11C582F44700F69D9?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUncontrolled%20Resource%20Consumption%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp.js)\n\nThe `express-fileupload` module does not restrict the size of the uploaded file. Thus, a denial-of-service attack is possible, because an attacker may submit a series of requests with very large files and use up all the space on the server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":49}}}],"ruleId":"sigma.file_upload_misconfiguration_of_filesize:express|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"9cd91ee21204ffc5927146aa37d59c19451a77bf738ffd61e6c8199cfec23a97"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":49}},"message":{"text":"The `express-fileupload` module does not restrict the size of the uploaded file. Thus, a denial-of-service attack is possible, because an attacker may submit a series of requests with very large files and use up all the space on the server."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":49}},"message":{"text":"Limit the size of an uploaded file by setting the `fileSize` property to a reasonable number no greater than 500MB in the `limits` object of the options."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/14F759F7C9D6B2A5CF7530D167232161?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DExposure%20of%20Resource%20to%20Wrong%20Sphere%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp.js)\n\nThe `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":45}}}],"ruleId":"sigma.root_path_attribute_cookie:express|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"325296673115b0c85c19e90838bd380cdd386b5a4117aacdefa2a2fbb3cfd746"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":45}},"message":{"text":"The `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":45}},"message":{"text":"Set the `path` property to the subdirectory where the application is hosted, not the root directory, to prevent the cookie from being accessed from unauthorized paths."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/03CCED9B683454F228148E374E31EAED?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dsast.json)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"sast.json"},"region":{"startLine":2449}}}],"ruleId":"sigma.hardcoded_secret:pattern_medium|text","partialFingerprints":{"ruleIdLocationHash/v1":"b3715c6feeb5aef98b801c8199a19b971ac00a6f0e5c663f8dd28bcd0debbaf4"}},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/60936A64F412E5253311F5A5E3696874?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Access%20Control%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":4}}}],"ruleId":"sigma.least_privilege_violation:docker_compose|text","partialFingerprints":{"ruleIdLocationHash/v1":"fe22193e5946db2e8292eecfbc85b12b2dc485a8134c77307031c177496d7c96"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":4}},"message":{"text":"The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":4}},"message":{"text":"Remove all the default capabilities from the list of capabilities by setting the `cap_drop` value to `ALL` and then add only specific capabilities needed by a container."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/96FDD865EB8A731B243AAC9054D3678E?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Access%20Control%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":16}}}],"ruleId":"sigma.least_privilege_violation:docker_compose|text","partialFingerprints":{"ruleIdLocationHash/v1":"534de3694fd81288a11126abdb2251b46ad1c1ccb3fc9f7bba68dba134951dc9"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":16}},"message":{"text":"The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":16}},"message":{"text":"Remove all the default capabilities from the list of capabilities by setting the `cap_drop` value to `ALL` and then add only specific capabilities needed by a container."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/FD38A0301D06A35FC5EF5F35C73DFC80?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DCross-site%20Scripting%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Droutes%2Findex.js)\n\nUntrusted user-supplied data is inserted into a context that can execute JavaScript without adequate validation, escaping, or filtering."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"routes/index.js"},"region":{"startLine":332}}}],"ruleId":"xss|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"f0023b841cf652eb4216919348f6cd79658b0fc1a9e4396baf6cee07c12a12cb"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"routes/index.js"},"region":{"startLine":331}},"message":{"text":"Parameter \"res\" has type \"ExpressResponse\" when the callback function is called."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"routes/index.js"},"region":{"startLine":332}},"message":{"text":"Passing \"messages\" to \"res.send\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"routes/index.js"},"region":{"startLine":332}},"message":{"text":"Calling \"res.send\" with the tainted value in property \"*\" of \"messages\". The untrusted data reaches a sink that may allow an attacker to control part of the response."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"routes/index.js"},"region":{"startLine":332}},"message":{"text":"Escape non-constant data appropriately before concatenating it into HTML. The specific sequence of escapers necessary to make data safe depends on its syntactic position in the HTML. Allowing only safe characters (whitelisting) sometimes suffices to avoid XSS vulnerabilities, but only the strictest whitelists prevent all attacks."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"routes/index.js"},"region":{"startLine":334}},"message":{"text":"Parameter \"req\" has type \"ExpressRequest\" when the callback function is called."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":28}},"message":{"text":"Assigning: \"app\" = \"express()\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":29}},"message":{"text":"Calling \"/*other:common-js-require*/\".\n* This call assigns a reference to \"function!index.js!exports.chat.add\" to \"exports.chat.add\".\n* This call returns \"exports\".\n* This call assigns a reference to \"function!index.js!exports.chat.addmessages\" to captured variable \"messages\".\n* This call assigns a reference to \"function!index.js!exports.chat.get\" to \"exports.chat.get\".\n"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":29}},"message":{"text":"Assigning: \"routes\" = \"require(\"./routes\")\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":66}},"message":{"text":"Calling the function \"app.get\" registers all arguments from argument 2 to the end as event handlers."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":66}},"message":{"text":"Calling at a later point \"get\". This call uses \"messages\" for sensitive computation."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":67}},"message":{"text":"Calling the function \"app.put\" registers all arguments from argument 2 to the end as event handlers."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":67}},"message":{"text":"Calling at a later point \"add\". This call assigns to closed variable \"messages\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":67}},"message":{"text":"Calling at a later point \"add\". This call taints \"app.get(\"port\")\"."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/927A657683876476D18C43B592529BAC?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":21}}}],"ruleId":"sigma.container_privilege_escalation_allowed:docker_compose|text","partialFingerprints":{"ruleIdLocationHash/v1":"b8d53df0507eceba988d141791c7e44ae1d1fd5bf32d3962b7b729779a40f89a"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":21}},"message":{"text":"The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":21}},"message":{"text":"Disable container privilege escalation by explicitly setting `no-new-privileges` to `true`."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/D17820046B510087D0BB05DFB17B8388?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dtests%2Fauthentication.component.spec.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"tests/authentication.component.spec.js"},"region":{"startLine":12}}}],"ruleId":"sigma.hardcoded_secret:pattern_low|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"a3017417752dc5f10c36800227aade5b144134817a8a8076326589ef879af079"}},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/EDAF9F7C2CE896AB5CE273BA7020EC17?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":16}}}],"ruleId":"sigma.container_privilege_escalation_allowed:docker_compose|text","partialFingerprints":{"ruleIdLocationHash/v1":"97c282e288cdf0fccf0b522943c818703f3d7e3be56415cdf18abf8b5b3c8f0e"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":16}},"message":{"text":"The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":16}},"message":{"text":"Disable container privilege escalation by explicitly setting `no-new-privileges` to `true`."}}}]}]}]},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/6AA2CA47A3340CD4CD420053205F93AC?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dtests%2Fauthentication.component.spec.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"tests/authentication.component.spec.js"},"region":{"startLine":11}}}],"ruleId":"sigma.hardcoded_secret:pattern_low|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"2123d230ec3d332e43172e83726ef3e3f0324e3dcfca7d6d737c1a3171220fe3"}},{"message":{"text":"[\\[See in Polaris\\]](https://poc.polaris.blackduck.com/portfolio/portfolios/00296cd0-45bc-40be-8d02-fc1a3203abde/portfolio-items/da0ef185-80f3-4e1a-bd3d-6bb7b49af546/projects/15762d9c-a518-4da0-afe8-5a344aa2ad74/issues/4CAD264C28F3906D292176BA49880AC3?branchId=758e9056-0539-47c4-aaf2-013a70a8331f&filter=issueType%3Alocalized-name%3DSensitive%20Cookie%20with%20Improper%20SameSite%20Attribute%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp.js)\n\nThe `cookie.sameSite` option is either undefined or set to the insecure value `none` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":45}}}],"ruleId":"sigma.missing_samesite_attribute_session_cookie:express|javascript","partialFingerprints":{"ruleIdLocationHash/v1":"d57f15548f87530ada979299b289c120a8715bdbf396874f8d33ab94a5fec184"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":45}},"message":{"text":"The `cookie.sameSite` option is either undefined or set to the insecure value `none` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"app.js"},"region":{"startLine":45}},"message":{"text":"Explicitly set the `cookie.sameSite` value to `true` or `strict` to omit cookies from all cross-origin requests. Optionally, the `cookie.sameSite` value may be set to `lax` to allow cookies in cross-site requests when the user is navigating to the cookie's origin, such as when following a link."}}}]}]}]}]}],"version":"2.1.0"}
